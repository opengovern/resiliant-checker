name: Compliance Benchmark Check

on:
  workflow_dispatch:
    inputs:
      benchmark_id:
        description: "The Benchmark ID"
        required: true
      integration_ids:
        description: "List of Integration IDs (comma-separated)"
        required: true

jobs:
  compliance-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Step 1: Make the first API call to schedule the benchmark
      - name: First API Call - Schedule Compliance Run
        id: schedule_compliance_run
        env:
          ENDPOINT: ${{ secrets.ENDPOINT }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          # Prepare the JSON payload
          integration_ids=$(echo "${{ github.event.inputs.integration_ids }}" | tr ',' '\n' | jq -R -s '[split("\n") | .[] | select(length > 0) | {"integration_id": .}]')
          payload=$(jq -n \
            --argjson integrations "$integration_ids" \
            '{"with_incidents": false, "integration_info": $integrations}')
          
          # Make the POST request
          response=$(curl -s -X POST "$ENDPOINT/main/schedule/api/v3/compliance/benchmark/${{ github.event.inputs.benchmark_id }}/run" \
            -H "Authorization: Bearer $API_KEY" \
            -H "Content-Type: application/json" \
            -d "$payload")

          # Parse job_ids from the response and save to a file
          echo "$response" | jq -r '.jobs[].job_id' > job_ids.txt
          echo "Job IDs extracted: $(cat job_ids.txt)"

      # Step 2: Iterate through Job IDs and Poll for Job Completion
      - name: Poll for Job Completion
        id: poll_job_completion
        env:
          ENDPOINT: ${{ secrets.ENDPOINT }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          passed=true
          max_retries=10  # Retry for up to 5 minutes (10 retries with 30-second intervals)

          # Iterate through each Job ID
          while read -r job_id; do
            echo "Processing Job ID: $job_id"
            retry_count=0
            job_status="pending"

            # Poll for job completion
            while [ $retry_count -lt $max_retries ]; do
              echo "Polling job status for Job ID: $job_id (Attempt: $((retry_count+1)))"

              # Make the GET request to fetch job status
              result=$(curl -s "$ENDPOINT/main/compliance/api/v3/quick/scan/$job_id?with_incidents=true" \
                -H "Authorization: Bearer $API_KEY")

              # Check if the job has completed
              job_status=$(echo "$result" | jq -r '.job_summary.auditable')
              if [ "$job_status" = "true" ]; then
                echo "Job ID $job_id completed successfully."
                echo "$result" > "result_$job_id.json"  # Save each job's result for further processing
                break
              fi

              echo "Job ID $job_id is still running. Retrying in 30 seconds..."
              retry_count=$((retry_count+1))
              sleep 30
            done

            # If the job didn't complete within the timeout
            if [ "$job_status" != "true" ]; then
              echo "Job ID $job_id did not complete within the timeout period (5 minutes)."
              passed=false
            fi
          done < job_ids.txt

          # Set the outcome of the step based on the passed variable
          if [ "$passed" = "false" ]; then
            exit 1
          else
            echo "All jobs completed successfully."
          fi

      # Step 3: Analyze Results
      - name: Analyze Results
        id: analyze_results
        if: success()
        run: |
          passed=true

          # Iterate through each saved result file
          for result_file in result_*.json; do
            echo "Analyzing results from $result_file"

            # Parse critical controls from the result
            critical_alarms=$(jq '.controls | to_entries[] | select(.value.severity == "critical") | .value.control_summary.alarm' "$result_file")

            if [ -z "$critical_alarms" ]; then
              echo "No critical controls found in $result_file."
            elif [ "$critical_alarms" -
